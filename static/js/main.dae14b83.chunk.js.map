{"version":3,"sources":["index.js"],"names":["MathTest","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","Environment","React","Component","props","_this","Object","C_Users_Ana_Cobic_Documents_GitHub_react_math_test_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","C_Users_Ana_Cobic_Documents_GitHub_react_math_test_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_Ana_Cobic_Documents_GitHub_react_math_test_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","showEnv","numberOfTasks","difficulty","handleChange","bind","C_Users_Ana_Cobic_Documents_GitHub_react_math_test_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__","handleSubmit","event","target","value","name","setState","C_Users_Ana_Cobic_Documents_GitHub_react_math_test_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","preventDefault","_this$state","onSubmit","type","min","max","pattern","required","onChange","MathTasks","_this2","showResult","endResult","tasks","handleTestSubmit","document","getElementById","disabled","numOfCorrectAnswers","percentOfCorrectAnswers","querySelectorAll","forEach","task","taskResult","getAttribute","taskValue","classList","add","remove","text","createTextNode","parentNode","appendChild","toFixed","length","i","push","Task","assign","id","renderTasks","Result","numberOfVars","tmpVar","j","possibleOperators","operator","Math","floor","random","charAt","generateRandom","result","createTask","eval","key","step","window","location","reload","onClick","restartTest","lv","num","ReactDOM","render"],"mappings":"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","file":"static/js/main.dae14b83.chunk.js","sourcesContent":["// Main depenedencies\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// Custom CSS\r\nimport './style.css';\r\n\r\n/**\r\n * MathTest class - main element\r\n * Calls the Environment class\r\n */\r\nclass MathTest extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"mathTest\">\r\n        <Environment/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Environment class\r\n */\r\nclass Environment extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tshowEnv: true,\r\n    \tnumberOfTasks: null,\r\n    \tdifficulty: 1\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  /* Updates state on input change */\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value  = target.value;\r\n    const name   = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  /* If all fields are set, hides the setup and shows the test */\r\n  handleSubmit(event) {\r\n  \tevent.preventDefault();\r\n\r\n  \tconst { showEnv, numberOfTasks, difficulty } = this.state;\r\n\r\n  \tif (numberOfTasks && difficulty) {\r\n  \t\tthis.setState({\r\n      \tshowEnv: !showEnv,\r\n    \t});\t\r\n  \t}\r\n  }\r\n\r\n  /* Render the environment form and pass state data to the test */\r\n  render() {\r\n  \tif (this.state.showEnv) {\r\n\t    return (\r\n\t      <div className=\"envBox\">\r\n\t      \t<form className=\"envForm\" onSubmit={this.handleSubmit}>\r\n\t      \t \t<fieldset>\r\n\t      \t \t \t<div className=\"col-25\">\r\n\t\t  \t\t\t\t\t<label>Broj zadataka:</label>\r\n\t\t  \t\t\t\t</div>\r\n\t\t  \t\t\t\t<div className=\"col-75\">\r\n\t\t   \t\t\t\t \t<input type=\"number\" name=\"numberOfTasks\" min=\"1\" max=\"20\" pattern=\"^[0–9]$\" required value={this.state.value} onChange={this.handleChange} />\r\n\t\t   \t\t\t\t</div>\r\n\t  \t\t\t\t</fieldset>  \r\n\t  \t\t\t\t<fieldset>\r\n\t  \t\t\t\t\t<div className=\"col-25\">  \r\n\t        \t\t\t<label>Razina težine:</label>    \r\n\t        \t\t</div>\r\n\t        \t\t<div className=\"col-75\"> \r\n\t\t        \t\t<select name=\"difficulty\" value={this.state.value} onChange={this.handleChange}>\r\n\t            \t\t<option value=\"1\">1</option>\r\n\t            \t\t<option value=\"2\">2</option>\r\n\t            \t\t<option value=\"3\">3</option>\r\n\t         \t\t\t</select>\r\n\t         \t\t</div>  \r\n\t    \t\t\t</fieldset>\r\n\t    \t\t\t<fieldset>\r\n\t    \t\t\t\t<div className=\"col-100\"> \r\n\t\t\t\t\t\t\t\t<input type=\"submit\" value=\"Započni test\" />  \t\t\t\t\t\r\n\t\t\t\t\t\t\t</div>\r\n\t  \t\t\t\t</fieldset>\r\n\t\t\t\t\t</form>\r\n\t      </div>\r\n\t    ); \t\t\r\n  \t} else {\r\n  \t\treturn (\r\n  \t\t\t<MathTasks {...this.state}/>\r\n  \t\t)\r\n  \t}\r\n  }\r\n}\r\n\r\n/**\r\n * MathTasks class\r\n */\r\nclass MathTasks extends React.Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tshowResult: false,\r\n    \tendResult: 0,\r\n    \ttasks: []\r\n    };\r\n\r\n    this.handleTestSubmit = this.handleTestSubmit.bind(this);\r\n  }\r\n\r\n\thandleTestSubmit(event) {\r\n  \tevent.preventDefault();\r\n\r\n  \tdocument.getElementById(\"submitResult\").disabled = true;\r\n\r\n  \tlet numberOfTasks           = this.props.numberOfTasks;\r\n  \tlet numOfCorrectAnswers     = 0;\r\n  \tlet percentOfCorrectAnswers = 0;\r\n  \tlet tasks                   = document.querySelectorAll('.task > input');\r\n\r\n  \t// Calculate the result\r\n  \ttasks.forEach(function(task) {\r\n  \t\tlet taskResult = task.getAttribute('result');\r\n  \t\tlet taskValue  = task.value;\r\n\r\n  \t\tif (taskValue !== \"undefined\" && taskValue === taskResult) {\r\n  \t\t\tnumOfCorrectAnswers++;\r\n  \t\t\ttask.classList.add(\"correct\");\r\n  \t\t\ttask.classList.remove(\"incorrect\");\r\n  \t\t} else {\r\n  \t\t\ttask.classList.add(\"incorrect\");\r\n  \t\t\ttask.classList.remove(\"correct\");\r\n  \t\t}\r\n\r\n  \t\tlet text = document.createTextNode( \" [ \" + taskResult + \" ] \" );\r\n  \t\ttask.parentNode.appendChild(text);\r\n\t\t});\r\n\r\n\t\tpercentOfCorrectAnswers = numOfCorrectAnswers / numberOfTasks * 100;\r\n\t\tpercentOfCorrectAnswers = percentOfCorrectAnswers.toFixed(2);\r\n\r\n  \tthis.setState({\r\n      showResult: true,\r\n      endResult: percentOfCorrectAnswers\r\n    });\t\r\n  }\r\n\r\n\trenderTasks() {\r\n\t\tif (this.state.tasks.length == 0) {\r\n\t\t\tconst numberOfTasks = this.props.numberOfTasks;\r\n\t\t\tconst difficulty    = this.props.difficulty;\r\n\t\t\tlet tasks           = [];\r\n\r\n\t\t\tfor (let i = 0; i < numberOfTasks; i++) {\r\n\t\t\t\ttasks.push(<Task id={i} {...this.props}/>);\r\n\t\t\t}\r\n\r\n\t\t\tthis.setState({\r\n\t      tasks: tasks\r\n\t    });\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<form className=\"taskForm\" onSubmit={this.handleTestSubmit}>\r\n\t\t\t\t{this.state.tasks}\r\n\t\t\t\t<fieldset>\r\n\t    \t\t<div className=\"col-100\"> \r\n\t\t\t\t\t\t<input type=\"submit\" id=\"submitResult\" value=\"Provjeri rezultat\" />  \t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t  \t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n\r\n\trender() {\r\n\t  return (\r\n\t    <div>\r\n\t    \t<div className=\"taskBox\">\r\n\t\t\t\t\t{this.renderTasks()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"resultsBox\">\r\n\t\t\t\t\t<Result {...this.state}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t  );\r\n\t}\r\n}\r\n\r\n/**\r\n * Task class\r\n */\r\nclass Task extends React.Component {\r\n\t/* Depending on difficulty generate single task */\r\n\tcreateTask(difficulty) {\r\n\t\tlet task              = '';\r\n\t\tlet numberOfVars      = 2;\r\n\t\tlet tmpVar            = 0;\r\n\t\tlet j                 = 0;\r\n\t\tlet possibleOperators = '+-';\r\n\t\tlet operator          = '+';\r\n\r\n\t \t/**\r\n\t \t * NOTE - difficulty level should be programmed to corespond to classes \r\n\t \t * i.e. first grade, second...\r\n\t \t * Currently the rules are improvised\r\n\t \t * For additional code explenation look for last else if\r\n\t \t */\r\n\t\tif (difficulty == 1) {\r\n\t\t\tnumberOfVars = Math.floor(Math.random() * 3 + 2);\r\n\r\n\t\t\tfor (j; j < numberOfVars; j++) {\r\n\t\t\t\ttmpVar   = Math.floor(Math.random() * 20);\r\n\t\t \t\toperator = possibleOperators.charAt(Math.floor(Math.random() * possibleOperators.length));\r\n\r\n\t\t\t\tif (j != numberOfVars - 1) {\r\n\t\t\t\t\ttask += tmpVar + operator;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttask += tmpVar;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (difficulty == 2) {\r\n\t\t\tnumberOfVars      = Math.floor(Math.random() * 5 + 2);\r\n\t\t\tpossibleOperators = '+-*/';\r\n\r\n\t\t\tfor (j; j < numberOfVars; j++) {\r\n\t\t\t\ttmpVar   = generateRandom(2);\r\n\t\t \t\toperator = possibleOperators.charAt(Math.floor(Math.random() * possibleOperators.length));\r\n\r\n\t\t \t\tif (tmpVar < 0) {\r\n\t\t \t\t\ttmpVar = '(' + tmpVar + ')';\r\n\t\t \t\t}\r\n\r\n\t\t\t\tif (j != numberOfVars - 1) {\r\n\t\t\t\t\ttask += tmpVar + operator;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttask += tmpVar;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (difficulty == 3) {\r\n\t\t\t/**\r\n\t\t\t * Set count of numbers to be used. Additionly, in this case an even number\r\n\t\t\t * to prevent bugs because of unclosed brackets. Code is to basic :)\r\n\t\t\t * Define possible operators to be used.\r\n\t\t\t */\r\n\t\t\tnumberOfVars      = Math.floor(Math.random() * 3 + 2) * 2;\r\n\t\t\tpossibleOperators = '+-*/';\r\n\r\n\t\t\tfor (j; j < numberOfVars; j++) {\r\n\t\t\t\t/* Generate a number and a operator to be used. */\r\n\t\t\t\ttmpVar   = generateRandom(3);\r\n\t\t \t\toperator = possibleOperators.charAt(Math.floor(Math.random() * possibleOperators.length));\r\n\r\n\t\t \t\t/* If number is negative, add brackets */\r\n\t\t \t\tif (tmpVar < 0) {\r\n\t\t \t\t\ttmpVar = '(' + tmpVar + ')';\r\n\t\t \t\t}\r\n\r\n\t\t \t\t/**\r\n\t\t \t\t * Generate task\r\n\t\t \t\t */\r\n\t\t\t\tif (j != numberOfVars - 1 && (j % 2) == 0 ) {\r\n\t\t\t\t\ttask += '(' + tmpVar + ' ' + operator + ' ';\r\n\t\t\t\t} else if (j != numberOfVars - 1 && (j % 2) != 0 ) {\r\n\t\t\t\t\ttask += tmpVar + ')' + ' ' + operator + ' ';\r\n\t\t\t\t} else { \r\n\t\t\t\t\ttask += tmpVar + ')';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn task;\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet difficulty = this.props.difficulty;\r\n\t\tlet task       = '';\r\n\t\tlet result     = 0;\r\n\r\n\t\t// This option is not enabled yet in the input field\r\n\t\tdo {\r\n\t\t\ttask   = this.createTask(difficulty); \r\n\t\t\tresult = eval(task);\r\n\t\t} while (result === \"Infinity\")\r\n\r\n\t\tlet key = 'task' + this.props.id;\r\n\r\n\t\tif (result % 1 !== 0) {\r\n\t\t\tresult = result.toFixed(2);\r\n\t\t} else {\r\n\t\t\tresult = result.toFixed(0);\r\n\t\t}\r\n\r\n    return (\r\n\t\t<fieldset className=\"task\">{task} =\t<input type=\"number\" step=\"0.01\" name={key} result={result} /></fieldset>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Result class\r\n */\r\nclass Result extends React.Component {\r\n\trestartTest() {\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.props.showResult) {\r\n\t\t\treturn (\r\n    \t\t<div>\r\n    \t\t\t<div className=\"col-100\">\r\n    \t\t\t\tPostotak točno riješenih zadataka: {this.props.endResult}%\r\n    \t\t\t</div>\r\n    \t\t\t<div className=\"col-100\"> \r\n    \t\t\t\t<div className=\"buttonRow\">\r\n    \t\t\t\t\t<button type=\"button\" onClick={ this.restartTest.bind(this) }>Pokreni novi test</button>\r\n    \t\t\t\t</div>\r\n    \t\t\t</div>\r\n    \t\t</div>\r\n    \t);\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n  }\r\n}\r\n\r\n/**\r\n * Render main element by accessing root.\r\n */\r\nReactDOM.render(<MathTest />, document.getElementById(\"root\"))\r\n\r\n/**\r\n * Help functions\r\n */\r\n\r\n/**\r\n * Generate random according to difficulty\r\n */\r\nfunction generateRandom(lv) {\r\n\tvar num = 0;\r\n\r\n\tif (lv === 2) {\r\n\t  num = Math.floor(Math.random() * 201) - 100;\r\n\t} else if (lv === 3) {\r\n\t\tnum = Math.floor(Math.random() * 21) - 10\r\n\t}\r\n\r\n  return (num === 0) ? generateRandom(lv) : num;\r\n}"],"sourceRoot":""}